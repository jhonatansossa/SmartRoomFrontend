{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\klevi.alushi\\\\Desktop\\\\frontend\\\\src\\\\screens\\\\Login\\\\Login.js\",\n  _s = $RefreshSig$();\nimport { React, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport openHAB from \"../../openHAB/openHAB\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  var [usernameValue, setUsernameValue] = useState('');\n  var [passwordValue, setPasswordValue] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  let navigate = useNavigate();\n\n  // Initialize a boolean state\n  const [passwordShown, setPasswordShown] = useState(false);\n\n  // Password toggle handler\n  const togglePassword = () => {\n    // When the handler is invoked\n    // inverse the boolean state of passwordShown\n    setPasswordShown(!passwordShown);\n  };\n  useEffect(() => {\n    sessionStorage.removeItem('auth');\n    document.title = \"SmartRoom – Login\";\n  }, []);\n  const authenticateUser = async (e, usernameValue, passwordValue) => {\n    e.preventDefault();\n    try {\n      const response = await fetch(openHAB.url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: usernameValue,\n          password: passwordValue\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        sessionStorage.setItem('auth', 'true');\n\n        // Assuming your access token is in the \"access\" property of the response\n        const accessToken = data.user.access;\n\n        // Now you can use the accessToken as needed (e.g., store it in state)\n\n        navigate('/overview');\n      } else {\n        setErrorMessage('Wrong username or password, please try again');\n      }\n    } catch (error) {\n      console.error('Error during authentication:', error);\n      setErrorMessage('An error occurred during authentication');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"login-container\",\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"form-control btn-primary\",\n      onClick: e => authenticateUser(e, usernameValue, passwordValue),\n      children: \"Log in\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"daawn3hvh55IlSH6bQfBvQ0j0QY=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","openHAB","Login","usernameValue","setUsernameValue","passwordValue","setPasswordValue","errorMessage","setErrorMessage","navigate","passwordShown","setPasswordShown","togglePassword","sessionStorage","removeItem","document","title","authenticateUser","e","preventDefault","response","fetch","url","method","headers","body","JSON","stringify","email","password","ok","data","json","setItem","accessToken","user","access","error","console"],"sources":["C:/Users/klevi.alushi/Desktop/frontend/src/screens/Login/Login.js"],"sourcesContent":["import { React, useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport openHAB from \"../../openHAB/openHAB\";\r\n\r\nconst Login = () => {\r\n  var [usernameValue, setUsernameValue] = useState('');\r\n  var [passwordValue, setPasswordValue] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  let navigate = useNavigate();\r\n\r\n  // Initialize a boolean state\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n\r\n  // Password toggle handler\r\n  const togglePassword = () => {\r\n    // When the handler is invoked\r\n    // inverse the boolean state of passwordShown\r\n    setPasswordShown(!passwordShown);\r\n  };\r\n\r\n  useEffect(() => {\r\n    sessionStorage.removeItem('auth');\r\n    document.title = \"SmartRoom – Login\";\r\n  }, []);\r\n\r\n  const authenticateUser = async (e, usernameValue, passwordValue) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      const response = await fetch(openHAB.url, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          email: usernameValue,\r\n          password: passwordValue,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        sessionStorage.setItem('auth', 'true');\r\n        \r\n        // Assuming your access token is in the \"access\" property of the response\r\n        const accessToken = data.user.access;\r\n\r\n        // Now you can use the accessToken as needed (e.g., store it in state)\r\n        \r\n        navigate('/overview');\r\n      } else {\r\n        setErrorMessage('Wrong username or password, please try again');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during authentication:', error);\r\n      setErrorMessage('An error occurred during authentication');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-container\">\r\n      {/* ... (rest of your JSX) */}\r\n      <button\r\n        type=\"submit\"\r\n        className=\"form-control btn-primary\"\r\n        onClick={(e) => authenticateUser(e, usernameValue, passwordValue)}\r\n      >\r\n        Log in\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":";;AAAA,SAASA,KAAK,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,OAAO,MAAM,uBAAuB;AAAC;AAE5C,MAAMC,KAAK,GAAG,MAAM;EAAA;EAClB,IAAI,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACpD,IAAI,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACpD,IAAIU,QAAQ,GAAGT,WAAW,EAAE;;EAE5B;EACA,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;;EAEzD;EACA,MAAMa,cAAc,GAAG,MAAM;IAC3B;IACA;IACAD,gBAAgB,CAAC,CAACD,aAAa,CAAC;EAClC,CAAC;EAEDZ,SAAS,CAAC,MAAM;IACde,cAAc,CAACC,UAAU,CAAC,MAAM,CAAC;IACjCC,QAAQ,CAACC,KAAK,GAAG,mBAAmB;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,gBAAgB,GAAG,OAAOC,CAAC,EAAEf,aAAa,EAAEE,aAAa,KAAK;IAClEa,CAAC,CAACC,cAAc,EAAE;IAElB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACpB,OAAO,CAACqB,GAAG,EAAE;QACxCC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,KAAK,EAAEzB,aAAa;UACpB0B,QAAQ,EAAExB;QACZ,CAAC;MACH,CAAC,CAAC;MAEF,IAAIe,QAAQ,CAACU,EAAE,EAAE;QACf,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,EAAE;QAClCnB,cAAc,CAACoB,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC;;QAEtC;QACA,MAAMC,WAAW,GAAGH,IAAI,CAACI,IAAI,CAACC,MAAM;;QAEpC;;QAEA3B,QAAQ,CAAC,WAAW,CAAC;MACvB,CAAC,MAAM;QACLD,eAAe,CAAC,8CAA8C,CAAC;MACjE;IACF,CAAC,CAAC,OAAO6B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD7B,eAAe,CAAC,yCAAyC,CAAC;IAC5D;EACF,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,iBAAiB;IAAA,uBAE9B;MACE,IAAI,EAAC,QAAQ;MACb,SAAS,EAAC,0BAA0B;MACpC,OAAO,EAAGU,CAAC,IAAKD,gBAAgB,CAACC,CAAC,EAAEf,aAAa,EAAEE,aAAa,CAAE;MAAA,UACnE;IAED;MAAA;MAAA;MAAA;IAAA;EAAS;IAAA;IAAA;IAAA;EAAA,QACL;AAEV,CAAC;AAAC,GAnEIH,KAAK;EAAA,QAIMF,WAAW;AAAA;AAAA,KAJtBE,KAAK;AAqEX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}