{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\klevi.alushi\\\\Desktop\\\\frontend\\\\src\\\\screens\\\\AllDevices.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { generatePath, useNavigate } from \"react-router-dom\";\nimport openHAB from \"../openHAB/openHAB\";\nimport Axios from \"axios\";\nimport base64 from 'base-64';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AllDevices = () => {\n  _s();\n  let navigate = useNavigate();\n  const [openHABItems, setOpenHABItems] = useState([]);\n\n  //let base64 = require(\"base-64\");\n  const config = {\n    headers: {\n      Authorization: openHAB.token\n    }\n  };\n  useEffect(() => {\n    document.title = \"SmartRoom – All devices\";\n    let auth = sessionStorage.getItem(\"auth\");\n    if (auth !== \"true\") {\n      navigate(\"/login\");\n    } else {\n      fetchOpenHABItems();\n    }\n  }, []);\n  const fetchOpenHABItems = async () => {\n    const response = await Axios(openHAB.url + \"/api/v1/devices/items\", config);\n    setOpenHABItems(response.data);\n  };\n  var devices = [];\n  openHABItems.forEach(function (item) {\n    if (\"Switch\" in item.type) {\n      devices.push(item);\n    }\n  });\n  function redirectToDetailedDevice(id) {\n    let path = generatePath(\"/devices/:id/details\", {\n      id\n    });\n    navigate(path);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [devices.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"noDevicesPopup\",\n      children: \"No devices found. Make sure openHAB is running!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"vertical-scroll-area\",\n      children: devices.map(src => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"card hov-primary vertical\",\n        onClick: () => redirectToDetailedDevice(src.stateDescription.options[2].value),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-image vertical\",\n          style: {\n            backgroundImage: `url('/resources/${src.stateDescription.options[2].value}.svg')`\n          }\n        }, src.title, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-title vertical\",\n          children: src.stateDescription.options[0].value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(AllDevices, \"KcLGnqEZ+u+eQAtQNPljX2YcHpY=\", false, function () {\n  return [useNavigate];\n});\n_c = AllDevices;\nexport default AllDevices;\nvar _c;\n$RefreshReg$(_c, \"AllDevices\");","map":{"version":3,"names":["React","useEffect","useState","generatePath","useNavigate","openHAB","Axios","base64","AllDevices","navigate","openHABItems","setOpenHABItems","config","headers","Authorization","token","document","title","auth","sessionStorage","getItem","fetchOpenHABItems","response","url","data","devices","forEach","item","type","push","redirectToDetailedDevice","id","path","length","map","src","stateDescription","options","value","backgroundImage"],"sources":["C:/Users/klevi.alushi/Desktop/frontend/src/screens/AllDevices.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { generatePath, useNavigate } from \"react-router-dom\";\r\nimport openHAB from \"../openHAB/openHAB\";\r\nimport Axios from \"axios\";\r\nimport base64 from 'base-64';\r\n\r\nconst AllDevices = () => {\r\n  let navigate = useNavigate();\r\n\r\n  const [openHABItems, setOpenHABItems] = useState([]);\r\n\r\n  //let base64 = require(\"base-64\");\r\n  const config = {\r\n    headers: { Authorization: openHAB.token },\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.title = \"SmartRoom – All devices\";\r\n    let auth = sessionStorage.getItem(\"auth\")\r\n    if(auth !== \"true\") {\r\n      navigate(\"/login\");\r\n    }else{\r\n      fetchOpenHABItems();\r\n    }\r\n  }, []);\r\n\r\n  const fetchOpenHABItems = async () => {\r\n    const response = await Axios(openHAB.url + \"/api/v1/devices/items\", config);\r\n    setOpenHABItems(response.data);\r\n  };\r\n\r\n  var devices = [];\r\n  openHABItems.forEach(function (item) {\r\n    if (\"Switch\" in item.type) {\r\n      devices.push(item);\r\n    }\r\n  });\r\n\r\n  function redirectToDetailedDevice(id) {\r\n    let path = generatePath(\"/devices/:id/details\", { id });\r\n    navigate(path);\r\n  }\r\n\r\n  return (\r\n    <> \r\n    {devices.length === 0 &&\r\n      <div className=\"noDevicesPopup\">\r\n        No devices found. Make sure openHAB is running!\r\n      </div>\r\n    }\r\n\r\n      <div className=\"vertical-scroll-area\">\r\n        {devices.map((src) => (\r\n          <button\r\n            className=\"card hov-primary vertical\"\r\n            onClick={() =>\r\n              redirectToDetailedDevice(src.stateDescription.options[2].value)\r\n            }\r\n          >\r\n            {\r\n              <div\r\n                key={src.title}\r\n                className=\"card-image vertical\"\r\n                style={{\r\n                  backgroundImage: `url('/resources/${src.stateDescription.options[2].value}.svg')`,\r\n                }}\r\n              />\r\n            }\r\n            <div className=\"card-title vertical\">\r\n              {src.stateDescription.options[0].value}\r\n            </div>\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AllDevices;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,YAAY,EAAEC,WAAW,QAAQ,kBAAkB;AAC5D,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,SAAS;AAAC;AAAA;AAE7B,MAAMC,UAAU,GAAG,MAAM;EAAA;EACvB,IAAIC,QAAQ,GAAGL,WAAW,EAAE;EAE5B,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACA,MAAMU,MAAM,GAAG;IACbC,OAAO,EAAE;MAAEC,aAAa,EAAET,OAAO,CAACU;IAAM;EAC1C,CAAC;EAEDd,SAAS,CAAC,MAAM;IACde,QAAQ,CAACC,KAAK,GAAG,yBAAyB;IAC1C,IAAIC,IAAI,GAAGC,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC;IACzC,IAAGF,IAAI,KAAK,MAAM,EAAE;MAClBT,QAAQ,CAAC,QAAQ,CAAC;IACpB,CAAC,MAAI;MACHY,iBAAiB,EAAE;IACrB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,iBAAiB,GAAG,YAAY;IACpC,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACD,OAAO,CAACkB,GAAG,GAAG,uBAAuB,EAAEX,MAAM,CAAC;IAC3ED,eAAe,CAACW,QAAQ,CAACE,IAAI,CAAC;EAChC,CAAC;EAED,IAAIC,OAAO,GAAG,EAAE;EAChBf,YAAY,CAACgB,OAAO,CAAC,UAAUC,IAAI,EAAE;IACnC,IAAI,QAAQ,IAAIA,IAAI,CAACC,IAAI,EAAE;MACzBH,OAAO,CAACI,IAAI,CAACF,IAAI,CAAC;IACpB;EACF,CAAC,CAAC;EAEF,SAASG,wBAAwB,CAACC,EAAE,EAAE;IACpC,IAAIC,IAAI,GAAG7B,YAAY,CAAC,sBAAsB,EAAE;MAAE4B;IAAG,CAAC,CAAC;IACvDtB,QAAQ,CAACuB,IAAI,CAAC;EAChB;EAEA,oBACE;IAAA,WACCP,OAAO,CAACQ,MAAM,KAAK,CAAC,iBACnB;MAAK,SAAS,EAAC,gBAAgB;MAAA,UAAC;IAEhC;MAAA;MAAA;MAAA;IAAA,QAAM,eAGN;MAAK,SAAS,EAAC,sBAAsB;MAAA,UAClCR,OAAO,CAACS,GAAG,CAAEC,GAAG,iBACf;QACE,SAAS,EAAC,2BAA2B;QACrC,OAAO,EAAE,MACPL,wBAAwB,CAACK,GAAG,CAACC,gBAAgB,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,KAAK,CAC/D;QAAA,wBAGC;UAEE,SAAS,EAAC,qBAAqB;UAC/B,KAAK,EAAE;YACLC,eAAe,EAAG,mBAAkBJ,GAAG,CAACC,gBAAgB,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,KAAM;UAC5E;QAAE,GAJGH,GAAG,CAAClB,KAAK;UAAA;UAAA;UAAA;QAAA,QAKd,eAEJ;UAAK,SAAS,EAAC,qBAAqB;UAAA,UACjCkB,GAAG,CAACC,gBAAgB,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC;QAAK;UAAA;UAAA;UAAA;QAAA,QAClC;MAAA;QAAA;QAAA;QAAA;MAAA,QAET;IAAC;MAAA;MAAA;MAAA;IAAA,QACE;EAAA,gBACL;AAEP,CAAC;AAAC,GAtEI9B,UAAU;EAAA,QACCJ,WAAW;AAAA;AAAA,KADtBI,UAAU;AAwEhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}